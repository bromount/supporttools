<?php
/* File uploader with AJAX goodness...I think.
 * (C) 2007-2008 Ian Wilson.  It's SaaS, so the
 * Source code doesn't mean a thing, baby.
 * It's not clean, but I hope that the damn thing is functional!
 */
 
include 'database.inc.php';
include 'UploadProgressMeter.class.php';
$fileWidget = new UploadProgressMeter();
ini_set('upload_progress_meter.store_method', 'file');


$fileWidget->enableDebug();
if ($fileWidget->uploadComplete()) {
	// output javascript to the iframe to send a final status to the main window
	// this will catch error conditions
	echo $fileWidget->finalStatus();
	
	// Step 1:  We should create a Parsed ID (PID) for this run.  PID is the
	//          autogenerated ID number for the row record...  SQL injection is bad, so
	//	    we should totally sanitize the input first.
	
	$link = mysql_connect($db_host, $db_user, $db_pass);
	if (!is_resource($link)) {
		// Yeah.  This is bad.
		echo "Couldn't connect to the database.  Fatal Error.<br>\n";
		exit(1);
	}
	mysql_select_db($db_name,$link) or die('Fatal error selecting database.');
	if(get_magic_quotes_gpc()) {
            $name  = stripslashes($_POST['name']);
            $email = stripslashes($_POST['email']);
	    $cnsc  = stripslashes($_POST['cnsc']);
	    $fname = stripslashes($_FILES[1]['tmp_name']);
        } else {
            $name  = $_POST['name'];
            $email = $_POST['email'];
	    $cnsc  = $_POST['cnsc'];
	    $fname = $_FILES[1]['tmp_name'];
        }

        // Make a safe query
        $query = sprintf("INSERT INTO pid (`pid`, `user`, `email`, `cnsc`, `ipaddr`, `fname`, `dts`) VALUES (NULL, '%s', '%s', '%s', '%s', '%s', NOW());",
                    mysql_real_escape_string($name, $link),
                    mysql_real_escape_string($email, $link),
		    mysql_real_escape_string($cnsc, $link),
		    mysql_real_escape_string($fname,$link),
                    $_SERVER['REMOTE_ADDR']);
	mysql_query($query,$link);
	if (mysql_affected_rows($link) > 0) {
		// We've succeeded.  Now, we should insert data...woohoo!
		$pid = mysql_insert_id($link);
	} else {
		// Something bad happened?
		echo "Hrmms.  Something bad happened when adding something.<br>";
		echo htmlspecialchars(mysql_error());
		exit(2);
	}
	
	
	// move the file(s) where they need to go
	if (file_exists($_FILES[1]['tmp_name'])){
		echo "The file does exist where the app says it hould. Let's begin processing\n<br>";
		$vamessages = file($_FILES[1]['tmp_name']);
                echo "Pass 1:  Grabbing all pages and queries and placing them in the db<br>\n";
		foreach ($vamessages as $line_num => $line) {
			// Let's actually put all of the logic into it's own function
			// that way, this doesn't get out of hand
                        // $todo = parse_line($line,$pid);
			// echo "Line #<b>{$line_num}</b> : " . htmlspecialchars($line) . "<br />\n";
                }
                echo "<br>\nPass 2:  Storing queries in the Database...";
                foreach ($vamessages as $line_num => $line){
                        // Does the line have a "SELECT" statement?  If so, it's a query
                        if (strpos($line, "SELECT")) {
                                // We've got a query, so let's id the line as a query
                                $querytext = $line;
                                $inquery = 1;
                                echo "Found a query line, linenumber . " . $line_num ."\n<br>";
                        } elseif ($inquery = 1) {
                                // If not, is the line before it a query?
                                $querytext = $querytext . $line;
                                $line = trim($line);
                                if(!empty($line)) { 
                                        // If so, is this a blank line?
                                        $inquery =  0;
                                        // Update SQL here, baby
                                        echo "Found a Query! <br>\n<pre>";
                                        echo $querytext;
                                        echo "</pre>";
                                        $querytext = "";
                                }
                        }
                        // Ok.  Not a query, or part of a query
                }
                echo "Pass 3:  Pulling all Exceptions and Stack traces in the database<br>\n";
                foreach ($vamessages as $line_num => $line){
                        // Does the line contain an exception?
                        
                        // If not, is it part of an exception?
                        
                        // If so, is 
                }
                echo "Finally, I'm done!  Moving the file to someplace so the support engineer";
                echo " who is looking at the file can review it, or send along to engineering";
                echo "<br>\n";
		// We've parsed the files, now, we should probably move it to
		// someplace where we can do something with it, eventually...
		$filename = "/tmp/logviewer/" . basename($_FILES['upfile']['name']);
		if (move_uploaded_file($_FILES[1]['tmp_name'],$filename)) {
			echo "File was uploaded successfully.  Updating Salesforce and sending email.";
			#TODO:  Salesforce Hook
			#TODO:  Email Hook
		} else {
			echo "Error:  The file was not moved successfully.  Please contact ";
			echo "cnsupport@collab.net with the following information: ";
			echo "<PRE>";
			print_r($_FILES);
			echo "</PRE>";
		}
                echo "Looks great!  You can view the report by clicking <a href=";
                echo "\"" . $PHP_SELF ."\">here</a>.<br>/n";
		
	} else {
		echo "Hrmms.  The file's not there.  This isn't good?";
		exit(1);
	}
	echo "Completed!";
	exit;
}
?>
<html>
<head>
	<title>CollabNet Logfile Upload</title>
	<script type='text/javascript' src='fileserver.php?client=main,request,httpclient,dispatcher,json,util'></script>
	<script type='text/javascript' src='fileserver.php?stub=UploadProgressMeterStatus'></script>
	<?php echo $fileWidget->renderIncludeJs(); ?>
	<style>
	.progressBar {
		position: relative;
		padding: 2px;
		width: 300px;
		height: 40px;
		font-size: 14px;
	}
	.progressBar .background {
		border: solid 1px black;
		width: 270px;
		height: 20px;
	}
	.progressBar .bar {
		position: relative;
		background-color: green;
		width: 0px;
		height: 20px;
	}
	</style>
</head>
<body>
	
	<P>This is to be used for sending log information to the CollabNet support
	team.  Once you've entered in your Case number, and attached a copy of your
	vamessages.log file for uploading, the processing services will parse your logfile
	and once it's completed, it will notify collab support by adding a comment to the
	salesforce ticket.  After the ticket is closed, we will automatically purge your
	logfiles after 14 days.  This processer accepts vamessages.log files that follow
	our standard log4j settings that we include in the default jboss server package.
	If you've changed your log4j settings, this form may not work for you.  
	
<form action="upload.php" enctype="multipart/form-data" method="post" <?php echo $fileWidget->renderFormExtra(); ?>>
<label>Salesforce Case ID: CNSC-</label><input type="TEXT" name="cnsc"><br>
<label>Name: </label><input type="TEXT" name="name"><br>
<label>Email: (for notifications only)</label><input type="TEXT" name="email"><br>


<label>Select File: </label>
<div>
<?php echo $fileWidget->render(); ?>
<?php echo $fileWidget->renderProgressBar(); ?>
</div>
<br>
<input type="submit" value="Upload File">
</form>
<?php echo $fileWidget->renderHidden(); ?>
</body>
</html>
<?php

function parse_line($glue1,$pid)
{
   // I fully expect this to grow, exponentially, over time.  For now, let's
   // just start with the basics -- getting the page ID, and information
   // extracted from that.
	// The App's complaining about no DB down here....grr...
	include('database.inc.php');
	$link = mysql_connect($db_host, $db_user, $db_pass);
	if (!is_resource($link)) {
		// Yeah.  This is bad.
		echo "Couldn't connect to the database.  Fatal Error.<br>\n";
		exit(1);
	}
	mysql_select_db($db_name,$link) or die('Fatal error selecting database.');

   
   if (strpos($glue1, "PAGE START")) {
	// The string should look like this...
	// 2008-01-08 07:42:34,706 DEBUG [com.vasoftware.sf.client.util.SessionTracker][page id: 62][rouellette@A947B768B66F36B24E02B4D217D2952E] PAGE START: ID[62] URI[GET /sf/scm/do/listRepositories/projects.rgb_bnp_version_1_03_testing/scm] active[1] memoryAllocated[212729856] memoryUsed[127441464] userAgent[Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)]
	// Let's build regexp's for each of the items that we're looking to get
	// Match the Date.  variable = $logdate
	preg_match("/\d\d\d\d-\d\d-\d\d/",$glue1,$match);
	$logdate = $match[0];
	// echo "Log Date of page start = " . $logdate . "\n<br>";
	// Match the Time.  variable = $logtime
	preg_match("/\d\d:\d\d:\d\d,\d\d\d/",$glue1,$match);
	$logtime = $match[0];
	// echo "Log Time of page start = " . $logtime . "\n<br>";
	// Match the event that is called:  variable = $call 
	// I can't really do this correctly with preg_match, so I'm going
	// to use instr to determine the location of the brackets, and then
	// cut the text from between the brackets.  It's not the most effective
	// way of doing this, but, I guess that it works.
	$call = extractBetweenDelimeters($glue1,'[',']');
	// echo "Log Page call is  : ". $call . "\n<br>";
	// This is what i'm trying to match: [page id: 62] $pageid
	preg_match("/page id: \d*/", $glue1, $pagematch);
	$pageid = $pagematch[0];
	// echo "Log page ID extrated text : " . $pageid . "<br>\n";
	preg_match("(\d+)",$pageid,$id);
	$pageid = $id[0];
	// echo "Raw page number = ". $id[0] . "<br>\n";
	
	// Now, let's match the session information $logsession
	// [rouellette@A947B768B66F36B24E02B4D217D2952E]
	// mebbe: (\w+@[a-zA-Z0-9]+?) 
	preg_match("(\w+@[a-zA-Z0-9]*)",$glue1,$sessioninfo);
	preg_match("(\w+)",$sessioninfo[0],$useridentify);
	$useridentify = $useridentify[0];
	preg_match("(@[A-F0-9]+)",$sessioninfo[0],$sessionhash);
	$usersession = ltrim($sessionhash[0], "@");
	// Now, let's Skip the page start, because we know this already
	// We need to grab the URI... method = $method, $uri = $uri
	// URI[GET /sf/scm/do/listRepositories/projects.rgb_bnp_version_1_03_testing/scm]
	$uricatch = extractBetweenDelimeters($glue1, 'URI[',']');
	preg_match("{(GET|POST)}",$uricatch,$tmpmethod);
	//echo "Page request ". $method[0] . "<br>\n";
	$method = $tmpmethod[0];
	preg_match("{/sf/.*}", $uricatch, $tmpuri);
	// echo "URI: " . $uri[0] . "<br>\n";
	$uri = $tmpuri [0];
	// What does Active do?  No Effing Clue, but we should probably catch it... $active
	//active[1]
	preg_match("{active\[\d*\]}", $glue1, $activecatch);
	preg_match("{\d+}",$activecatch[0],$activeresult);
	// echo "Active something... " . $activeresult[0] . "<br>\n";
	$active = $activeresult[0];
	//memoryAllocated[212729856]
	preg_match("{memoryAllocated\[\d*\]}",$glue1,$tmpvar);
	preg_match("{\d+}",$tmpvar[0],$tmpmemoryallocated);
	//echo "Memory Allocated... " . $memoryallocated[0] . "<br>\n";
	$memoryallocated = $tmpmemoryallocated[0];
	//memoryUsed[127441464]
	preg_match("{memoryUsed\[\d*\]}",$glue1,$tmpvar);
	preg_match("{\d+}",$tmpvar[0],$tmpmemoryused);
	$memoryused = $tmpmemoryused[0];
	// echo "Memory Used... " . $memoryused[0] . "<br>\n";
	//userAgent[Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)]
	$useragent = extractBetweenDelimeters($glue1,'userAgent[',']');
	preg_match("{\[.*}", $useragent, $userarray);
	$useragent = ltrim($userarray[0], "[");
	//echo "User Agent ... " . $useragent . "<br>\n<hr>";
	//
	//---------------------------------------------------------------------
	// Ok, so we've parsed all of this info, now, I guess we need a meaningful
	// way to actually insert this into the database.  We should always maintain
	// a copy of the file for archival purposes until we've deleted the file,
	// even if the file is stored in a .gzip format.  We'll deal with file-level
	// stuff in the actual handler that calls this subroutine.  For now, I'm
	// focusing on the storage of this parser and information in the database
	// $logdate = date
	// $logtime = time (I am not sure about the precision information afterwords)
	// $call = com.vasoftware.whatever.the.hell.is.called (varchar x 60)
	// $pageid = number.  No precision, so medint?  (this should be optimized!)
	// $useridentify == username (varchar x 15)
	// $usersession == user session (hex x 32)
	// $method = Get or Post -- varchar x 5
	// $uri = URI -- varchar x 255
	// $active == integer
	// $memoryallocated == integer
	// $memoryused == integer
	// $useragent == varchar x 255
	// I added duration, not knowing the ramifications of doing so, but let's
	// roll with it.  
	$query = sprintf("INSERT INTO pagehistory VALUES (NULL, '%s', '%s', '%s','%s', '%s', '%s','%s', '%s', '%s','%s', '%s', '%s','%s');",
		$pid,
		$logdate,
		$logtime,
		$call,
		$pageid,
		$useridentify,
		$usersession,
		$method,
		$uri,
		$active,
		$memoryallocated,
		$memoryused,
		$useragent);
	mysql_query($query,$link);
	if (mysql_affected_rows($link) > 0) {
		echo " .";
	} else {
		echo "Hrmms.  Something's wrong.<br>\n";
		echo htmlspecialchars(mysql_error());
		exit(2);
	}
	
	
   }
 	
	

   if (strpos($glue1, "PAGE END")) {
        // 2008-01-25 05:11:20,765 DEBUG [com.vasoftware.sf.client.util.SessionTracker][][ndeshmuk@B1DEBD286DDF5256E7CB58C33896715F] PAGE END: ID[949528] URI[GET /sf/sfmain/do/] duration[906] uploadDuration[4] active[1] memoryAllocated[773652480] memoryUsed[327852704]
        // I'm guessing that we need to grab the memory values, and the duration, along with
        // upload duration.
        
        // Catch: date
        preg_match("/\d\d\d\d-\d\d-\d\d/",$glue1,$match);
	$logdate = $match[0];
        
	// Catch: Time
        // Match the Time.  variable = $logtime
	preg_match("/\d\d:\d\d:\d\d,\d\d\d/",$glue1,$match);
	$logtime = $match[0];
	
        
        
        // catch:        PAGE END: ID[949528]
        $pagematch = extractBetweenDelimeters($glue1,'ID[',']');
        preg_match("(\d+)",$pagematch,$id);
	$pageid = $id[0];
        // Catch: duration[906]
       
        $raw = extractBetweenDelimeters($glue1, 'duration[',']');
        preg_match("/\d+/",$raw,$id);
        $duration = $id[0];
        
        // Catch: uploadDuration[4]
        
        $raw = extractBetweenDelimeters($glue1, 'uploadDuration[',']');
        preg_match("/\d+/",$raw,$id);
        $upduration = $id[0];
        
        // Catch: active[1]
        
        $raw = extractBetweenDelimeters($glue1, 'active[',']');
        preg_match("/\d+/",$raw,$id);
        $active = $id[0];
        
        // Catch: memoryAllocated[773652480]
        $raw = extractBetweenDelimeters($glue1, 'memoryAllocated[',']');
        preg_match("/\d+/",$raw,$id);
        $memallo= $id[0];
        
        // Catch: memoryUsed[327852704]
        $raw = extractBetweenDelimeters($glue1, 'memoryUsed[',']');
        preg_match("/\d+/",$raw,$id);
        $memused = $id[0];
        
        // date, time, PageID, duration, uploadDuration, active, memoryAllocated, memoryUsed
        $query = sprintf("INSERT INTO pageduration VALUES (NULL, '%s','%s','%s', '%s', '%s','%s', '%s', '%s','%s');",
		$logdate,
                $logtime,
                $pid,
                $pageid,
		$duration,
		$upduration,
		$active,
		$memallo,
		$memused);
	mysql_query($query,$link);
	if (mysql_affected_rows($link) > 0) {
		echo " -";
	} else {
		echo "Hrmms.  Something's wrong.<br>\n";
		echo htmlspecialchars(mysql_error());
		echo "Query was: ". $query;
                exit(2);
	}
        
        
   }
   if (strpos($glue1, "End Query:")) {
        // Start query string is like this
        // 2008-01-25 05:11:23,024 DEBUG [com.vasoftware.sf.server.common.querygenerator.Query][page id: 949529][hborse@053C8B6769564B536DA93B2EFD7411C8] End Query: [Id: 3676333] [duration: 10]
        // Let's break it down...
        // 2008-01-25
        preg_match("/\d\d\d\d-\d\d-\d\d/",$glue1,$match);
	$logdate = $match[0];
        // 05:11:19,860
	preg_match("/\d\d:\d\d:\d\d,\d\d\d/",$glue1,$match);
	$logtime = $match[0];
        // DEBUG -- I really don't think we need to log this!
        // [com.vasoftware.sf.server.common.querygenerator.Query]
        $call = extractBetweenDelimeters($glue1,'[',']');
        // [page id: 949528]
        preg_match("/page id: \d*/", $glue1, $pagematch);
	$pageid = $pagematch[0];
	// echo "Log page ID extrated text : " . $pageid . "<br>\n";
	preg_match("(\d+)",$pageid,$id);
	$pageid = $id[0];
	
        // [ndeshmuk@B1DEBD286DDF5256E7CB58C33896715F]
        
        preg_match("(\w+@[a-zA-Z0-9]*)",$glue1,$sessioninfo);
	preg_match("(\w+)",$sessioninfo[0],$useridentify);
	$useridentify = $useridentify[0];
	preg_match("(@[A-F0-9]+)",$sessioninfo[0],$sessionhash);
	$usersession = ltrim($sessionhash[0], "@");
	 
        // Start Query:
        // [Id: 3676329]
        // This is what i'm trying to match: [page id: 62] $pageid
	preg_match("/id: \d*/", $glue1, $pagematch);
	$pageid = $pagematch[0];
	// echo "Log page ID extrated text : " . $pageid . "<br>\n";
	preg_match("(\d+)",$pageid,$id);
	$queryid = $id[0];
	
        // [duration: 10]
        
        preg_match("/duration: \d*/", $glue1, $pagematch);
	$durationid = $pagematch[0];
	// echo "Log page ID extrated text : " . $pageid . "<br>\n";
	preg_match("(\d+)",$durationid,$id);
	$duration = $id[0];
        
        // Ok.  I've got all of this assembled into a query, now I need to
        // insert it into the database.
 
        $query = sprintf("INSERT INTO queryhistory VALUES (NULL, '%s','%s','%s','%s','%s','%s','%s','%s','%s',NULL);",
		$pid,
                $logdate,
                $logtime,
                $call,
                $pageid,
                $queryid,
		$duration,
                $useridentify,
                $usersession);
	mysql_query($query,$link);
	if (mysql_affected_rows($link) > 0) {
		echo "
                +";
	} else {
		echo "Hrmms.  Something's wrong.<br>\n";
		echo htmlspecialchars(mysql_error());
		echo "Query was: ". $query;
                exit(2);
	}
        
        
   }
}
function extractBetweenDelimeters($inputstr,$delimeterLeft,$delimeterRight) {
    $posLeft  = stripos($inputstr,$delimeterLeft)+1;
    $posRight = stripos($inputstr,$delimeterRight,$posLeft+1);
    return substr($inputstr,$posLeft,$posRight-$posLeft);
   }
?>